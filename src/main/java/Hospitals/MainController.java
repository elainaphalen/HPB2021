package main.java.Hospitals;
import org.json.JSONArray;
import org.apache.commons.lang3.StringEscapeUtils;
import org.json.JSONObject;
import org.hibernate.Session;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Scanner;

@Controller // This means that this class is a Controller
@RequestMapping(path="/HPB2021") // This means URL's start with /demo (after Application path)
public class MainController {
  @Autowired // This means to get the bean called userRepository
  // Which is auto-generated by Spring, we will use it to handle the data
  private UserRepository userRepository;

  @PostMapping(
          path = "/add",
          consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE},
          produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE})

  public @ResponseBody String addNewUser (@RequestBody Hospital h) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

    /*Hospital h = new Hospital();
    h.setName(name);
    h.setCounty(county);
    h.setDate(date);
    h.setVaccines(vaccines);*/
    System.out.println(h.toString());
    userRepository.save(h);
    return "Saved";
  }

  // all data
  @GetMapping(path="/all")
  public @ResponseBody Iterable<Hospital> getAllUsers() {
    Session session = AccessingMyData.sF.openSession();
    session.beginTransaction();

    List<Hospital> result = session.createQuery("select h FROM Hospital h", Hospital.class).list();
    session.getTransaction().commit();
    session.close();

    return result;
  }

  private String getCVP(boolean desc) {
    return "select new main.java.Hospitals.CountyVaccinePair(county, sum(vaccines)) " +
            "FROM Hospital " +
            "group by county " +
            "order by sum(vaccines) "
            + (desc ? "desc":"asc");

  }

  // top 10 or bottom 10 counties
  @GetMapping(path="/counties")
  public @ResponseBody Iterable<CountyVaccinePair> getTopCounties(@RequestParam(defaultValue = "true") boolean desc) {
    Session session = AccessingMyData.sF.openSession();
    session.beginTransaction();

    String theQ = getCVP(desc);
    System.out.println(theQ);
    List<CountyVaccinePair> counties = session.createQuery(theQ, CountyVaccinePair.class).setMaxResults(10).list();

    session.getTransaction().commit();
    session.close();
    System.out.println(counties);
    return counties;
  }

  // overall total count of vaccines nationwide
  @GetMapping(path="/total")
  public @ResponseBody Iterable<VaccineCount> getTotalWasted() {
    Session session = AccessingMyData.sF.openSession();
    session.beginTransaction();

    List<VaccineCount> result = session.createQuery(
            "select new main.java.Hospitals.VaccineCount(sum(vaccines)) " +
                    "FROM Hospital", VaccineCount.class).list();
    session.getTransaction().commit();
    session.close();

    return result;

  }

  // total vaccines wasted for every day ever
  @GetMapping(path="/byDate")
  public @ResponseBody Iterable<TotalsByDay> getTotalByDay() {
    Session session = AccessingMyData.sF.openSession();
    session.beginTransaction();

    List<TotalsByDay> result = session.createQuery(
            "select new main.java.Hospitals.TotalsByDay(sum(vaccines), date) " +
                    "FROM Hospital group by date", TotalsByDay.class).list();
    session.getTransaction().commit();
    session.close();

    return result;

  }

  // we will get a county, we will sum the total vaccines for each hospital in the county
  @GetMapping(path="/selectCounty")
  public @ResponseBody Iterable<HospitalVaccinePair> getAllHospitals(@RequestParam String countyName) {
    Session session = AccessingMyData.sF.openSession();
    session.beginTransaction();

    System.out.println(countyName);
    String query = "select new main.java.Hospitals.HospitalVaccinePair(sum(vaccines), name) " +
            "FROM Hospital where county = \'" + countyName + "\' group by name";
    System.out.println(query);
    List<HospitalVaccinePair> result = session.createQuery(
            query, HospitalVaccinePair.class).list();
    session.getTransaction().commit();
    session.close();

    return result;

  }

  // delete all
  @GetMapping(path="/aaa")
  public @ResponseBody Iterable<String> getAAA() {
    Session session = AccessingMyData.sF.openSession();
    session.beginTransaction();

    userRepository.deleteAll();
    File text = new File("C:\\page.txt");
    Scanner s = new Scanner("");
    try {
      s = new Scanner(text);
    } catch (FileNotFoundException f) { }

    List<Hospital> loh = new ArrayList<Hospital>();
    boolean b = true;
    while(s.hasNextLine()) {
       String str = s.nextLine();
       String escape = StringEscapeUtils.unescapeJava(str);
       System.out.println(escape.substring(1 + (b?1:0), escape.length() - 1));
       Hospital h = jsonToHospital(escape.substring(1 + (b?1:0), escape.length() - 1));
       loh.add(h);
       b = false;
    }

    userRepository.saveAll(loh);

    session.getTransaction().commit();
    session.close();

    return new ArrayList<String>();

  }

  private Hospital jsonToHospital(String s) {
    JSONObject json = new JSONObject(s);
    String d = (String)json.get("date");
    System.out.println(d);
    int year = (int)Long.parseLong(d.substring(0,4));
    int month = (int)Long.parseLong(d.substring(5, 7));
    int day = (int)Long.parseLong(d.substring(8));

    Date newDate = new Date(year - 1900, month, day);
    return new Hospital(newDate, (String)json.get("name"),
            (String)json.get("county"), Long.parseLong(String.valueOf(json.get("vaccines"))));
  }
}


//localhost:8080/HPB2021/selectCounty   all grand total vaccines wasted by hospitals in this county
