package main.java.Hospitals;

import org.hibernate.Session;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import java.util.List;

@Controller // This means that this class is a Controller
@RequestMapping(path="/HPB2021") // This means URL's start with /demo (after Application path)
public class MainController {
  @Autowired // This means to get the bean called userRepository
  // Which is auto-generated by Spring, we will use it to handle the data
  private UserRepository userRepository;

  @PostMapping(
          path = "/add",
          consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE},
          produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE})

  public @ResponseBody String addNewUser (@RequestBody Hospital h) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

    /*Hospital h = new Hospital();
    h.setName(name);
    h.setCounty(county);
    h.setDate(date);
    h.setVaccines(vaccines);*/
    System.out.println(h.toString());
    userRepository.save(h);
    return "Saved";
  }

  // all data
  @GetMapping(path="/all")
  public @ResponseBody Iterable<Hospital> getAllUsers() {
    Session session = AccessingMyData.sF.openSession();
    session.beginTransaction();

    List<Hospital> result = session.createQuery("select h FROM Hospital h", Hospital.class).list();
    session.getTransaction().commit();
    session.close();

    return result;
  }

  private String getCVP(boolean desc) {
    return "select new main.java.Hospitals.CountyVaccinePair(sum(vaccines), county) " +
            "FROM Hospital " +
            "group by county " +
            "order by sum(vaccines) "
            + (desc ? "desc":"asc");

  }

  // top 10 or bottom 10 counties
  @GetMapping(path="/counties")
  public @ResponseBody Iterable<CountyVaccinePair> getTopCounties(@RequestParam(defaultValue = "true") boolean desc) {
    Session session = AccessingMyData.sF.openSession();
    session.beginTransaction();

    String theQ = getCVP(desc);
    System.out.println(theQ);
    List<CountyVaccinePair> counties = session.createQuery(theQ, CountyVaccinePair.class).setMaxResults(10).list();

    session.getTransaction().commit();
    session.close();
    System.out.println(counties);
    return counties;
  }

  // overall total count of vaccines nationwide
  @GetMapping(path="/total")
  public @ResponseBody Iterable<VaccineCount> getTotalWasted() {
    Session session = AccessingMyData.sF.openSession();
    session.beginTransaction();

    List<VaccineCount> result = session.createQuery(
            "select new main.java.Hospitals.VaccineCount(sum(vaccines)) " +
                    "FROM Hospital", VaccineCount.class).list();
    session.getTransaction().commit();
    session.close();

    return result;

  }
}


// This returns a JSON or XML with the users
//    Iterable<Hospital> iH = userRepository.findAll();
//    List<Hospital> lH = new ArrayList<Hospital>((Collection<? extends Hospital>) iH);
//
//    for(Hospital h : lH) {
//      System.out.println(h.toString());
//    }
